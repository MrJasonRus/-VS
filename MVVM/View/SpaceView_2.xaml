<UserControl x:Class="СправочникПоVS.MVVM.View.SpaceView_2"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:СправочникПоVS.MVVM.View"
             mc:Ignorable="d" 
             d:DesignWidth="800" d:DesignHeight="3650">

    <FlowDocumentScrollViewer Foreground="AliceBlue">
        <FlowDocument FontFamily="Franklin Gothic Book">
            <Paragraph FontSize="28"
                       FontFamily="Franklin Gothic Heavy">
                Работа в пространстве
            </Paragraph>

            <Paragraph>Возможности Visual Studio:</Paragraph>
            <List MarkerStyle="Box">
                <ListItem>
                    <Paragraph FontWeight="Bold"
                               FontSize="22">
                        Сборка
                    </Paragraph>
                    <Paragraph Margin="10">
                        Когда вы создаете проект, Visual Studio создает конфигурации сборки по умолчанию для проекта и решения, 
                        которое содержит проект. Эти конфигурации определяют, как решения и проекты собираются и развертываются. 
                        Конфигурации проекта, в частности, уникальны для целевой платформы (например, Windows или Linux) и типа сборки
                        (например, debug или release). Вы можете редактировать эти конфигурации по своему усмотрению, а также создавать 
                        собственные конфигурации по мере необходимости.
                    </Paragraph>
                    <Paragraph Margin="10">
                        Далее, в разделе Сборка и очистка проектов и решений в Visual Studio, вы узнаете о различных настройках, 
                        которые можно внести в этот процесс. Настройки включают изменение выходных каталогов, указание пользовательских 
                        событий сборки, управление зависимостями проекта, управление файлами журнала сборки и подавление предупреждений компилятора.
                    </Paragraph>
                    <Table Margin="10">
                        <Table.Columns>
                            <TableColumn Width="*" />
                            <TableColumn Width="4*" />
                        </Table.Columns>
                        <TableRowGroup FontSize="14">
                            <TableRow FontSize="15">
                                <TableCell FontWeight="Bold">
                                    <Paragraph>Методы сборки</Paragraph>
                                </TableCell>
                                <TableCell FontWeight="Bold">
                                    <Paragraph>Преимущества</Paragraph>
                                </TableCell>
                            </TableRow>
                            <TableRow>
                                <TableCell>
                                    <Paragraph>IDE</Paragraph>
                                </TableCell>
                                <TableCell>
                                    <Paragraph>- Немедленно создавайте сборки и тестируйте их в отладчике. 
                                        Запускайте многопроцессорные сборки для проектов на C++ и C#.
                                        Настраивайте различные аспекты сборки.</Paragraph>
                                </TableCell>
                            </TableRow>
                            <TableRow>
                                <TableCell>
                                    <Paragraph>CMake</Paragraph>
                                </TableCell>
                                <TableCell>
                                    <Paragraph>- Сборка проектов с помощью инструмента CMake. Используйте одну и ту же 
                                        систему сборки на платформах Linux и Windows.</Paragraph>
                                </TableCell>
                            </TableRow>
                            <TableRow>
                                <TableCell>
                                    <Paragraph>MSBuild command line</Paragraph>
                                </TableCell>
                                <TableCell>
                                    <Paragraph>- Сборка проектов без установки Visual Studio. Запуск многопроцессорных 
                                        сборок для всех типов проектов. 
                                        Настраивайте большинство областей системы сборки.</Paragraph>
                                </TableCell>
                            </TableRow>
                            <TableRow>
                                <TableCell>
                                    <Paragraph>Azure Pipelines</Paragraph>
                                </TableCell>
                                <TableCell>
                                    <Paragraph>- Автоматизируйте процесс сборки как часть конвейера непрерывной интеграции/непрерывной доставки. 
                                        Применяйте автоматизированные тесты при каждой сборке.
                                        Используйте практически неограниченные облачные ресурсы для процессов сборки.
                                        Изменяйте рабочий процесс сборки и создавайте действия сборки для выполнения глубоко специализированных задач.</Paragraph>
                                </TableCell>
                            </TableRow>
                        </TableRowGroup>
                    </Table>
                </ListItem>
                <ListItem>
                    <Paragraph FontWeight="Bold"
                               FontSize="22">
                        Отладка
                    </Paragraph>
                    <Paragraph Margin="10">
                        Независимо от обстоятельств код, создаваемый разработчиками программного обеспечения, 
                        далеко не всегда работает так, как задумано. В некоторых случаях все идет совершенно не по плану! 
                        В подобных ситуациях необходимо выяснить, почему так происходит. При этом вместо многочасового 
                        изучения кода в поисках ошибок гораздо проще и эффективнее будет использовать средство отладки (отладчик).
                    </Paragraph>
                    <Paragraph Margin="10">
                        Проанализируйте проблему, задавая себе правильные вопросы. Это поможет вам выяснить, 
                        в чем состоит проблема, прежде чем приступать к ее решению.
                    </Paragraph>
                </ListItem>

                <ListItem>
                    <Paragraph FontWeight="Bold"
                               FontSize="22">
                        Тест
                    </Paragraph>
                    <Paragraph Margin="10">
                        Окно Test Explorer помогает разработчикам создавать, управлять и запускать модульные тесты. 
                        Можно использовать фреймворк для модульных тестов Microsoft или один из нескольких сторонних 
                        фреймворков с открытым исходным кодом.
                    </Paragraph>

                    <Paragraph Margin="10">
                        Visual Studio также расширяема и открывает двери для сторонних адаптеров модульного тестирования, таких как NUnit и xUnit.net. 
                        Кроме того, возможность клонирования кода идет рука об руку с созданием высококачественного программного обеспечения, 
                        помогая вам выявлять блоки семантически схожего кода, которые могут быть кандидатами на исправление общих ошибок или рефакторинг.
                    </Paragraph>
                </ListItem>

                <ListItem>
                    <Paragraph FontWeight="Bold"
                               FontSize="22">
                        Развёртывание
                    </Paragraph>
                    <Paragraph Margin="10">
                        Развертывание приложения, службы или компонента — это механизм их распространения 
                        для установки на других компьютерах, устройствах, серверах и в облаке. В Visual Studio 
                        можно выбрать соответствующий подход в зависимости от требуемого типа развертывания.
                    </Paragraph>
                    <List MarkerStyle="Box">
                        <ListItem>
                            <Paragraph>Развертывание в локальную папку</Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Публикация в Azure</Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Публикация в Интернете или развертывание в сетевой папке</Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Создание пакета установщика (классическое приложение Windows)</Paragraph>
                        </ListItem>
                        <ListItem>
                            <Paragraph>Публикация в Microsoft Store</Paragraph>
                        </ListItem>
                    </List>
                </ListItem>

                <ListItem>
                    <Paragraph FontWeight="Bold"
                               FontSize="22">
                        Управление версиями
                    </Paragraph>
                    <Paragraph Margin="10">
                        Git — это самая широко используемая система управления версиями в современном мире. 
                        С помощью Git вы можете отслеживать изменения, вносимые в код с течением времени, 
                        и выполнять откат к определенным версиям. Возможности Git в Visual Studio могут 
                        принести большую пользу и новичкам, и профессиональным разработчикам.
                    </Paragraph>

                </ListItem>

                <ListItem>
                    <Paragraph FontWeight="Bold"
                               FontSize="22">
                        Измерение производительности
                    </Paragraph>
                    <Paragraph Margin="10">
                        Средства профилирования и диагностики позволяют разработчикам диагностировать 
                        использование памяти и ЦП и выявлять другие проблемы на уровне приложения. С помощью 
                        этих средств можно накапливать данные о производительности во время выполнения приложения.
                    </Paragraph>

                    <Paragraph Margin="10">
                        Средство диагностики Использование ЦП, интегрированное в отладчик, позволяет находить 
                        проблемы с производительностью во время отладки. Анализировать загрузку ЦП также можно без 
                        подключения отладчика — нужно просто указать выполняющееся приложение.
                    </Paragraph>
                </ListItem>

                <ListItem>
                    <Paragraph FontWeight="Bold"
                               FontSize="22">
                        Данные
                    </Paragraph>
                    <Paragraph Margin="10">
                        В Visual Studio вы можете создавать приложения, которые подключаются к данным 
                        практически любого продукта или сервиса баз данных, в любом формате, в любом месте - 
                        на локальной машине, в локальной сети, в публичном, частном или гибридном облаке.
                    </Paragraph>
                    <Paragraph Margin="10">
                        Для приложений на JavaScript, Python, PHP, Ruby или C++ вы подключаетесь к данным так же, 
                        как и к любым другим, получая библиотеки и написав код. Для приложений .NET Visual Studio 
                        предоставляет инструменты, которые можно использовать для изучения источников данных, создания 
                        объектных моделей для хранения и манипулирования данными в памяти и привязки данных к 
                        пользовательскому интерфейсу. Microsoft Azure предоставляет SDK для .NET, Java, Node.js, 
                        PHP, Python, Ruby и мобильных приложений, а также инструменты в Visual Studio для подключения к Azure Storage.
                    </Paragraph>
                </ListItem>

                <ListItem>
                    <Paragraph FontWeight="Bold"
                               FontSize="22">
                        Совместная работа
                    </Paragraph>
                    <Paragraph Margin="10">
                        Visual Studio Live Share! Live Share позволяет редактировать и отлаживать код совместно 
                        с другими пользователями в реальном времени независимо от используемых вами языков 
                        программирования и создаваемых типов. Вы можете мгновенно и безопасно поделиться текущим 
                        проектом, запустить совместный сеанс отладки, предоставить общий доступ к экземплярам терминалов, 
                        перенаправлять веб-приложения localhost, осуществлять голосовые звонки и многое другое!
                    </Paragraph>
                    <Paragraph Margin="10">
                        В отличие от традиционного парного программирования, в Visual Studio Live Share 
                        разработчики могут работать совместно, не меняя персональные настройки редактора 
                        (тему, сочетания клавиш), при этом у каждого будет свой курсор. 
                        Таким образом, вы можете легко отслеживать ход мысли друг друга или же самостоятельно 
                        работать над своими идеями и задачами. Такая возможность совместной и независимой работы 
                        позволяет сделать взаимодействие более персонализированным.
                    </Paragraph>
                </ListItem>

                <ListItem>
                    <Paragraph FontWeight="Bold"
                               FontSize="22">
                        Разработка с использованием контейнеров Docker
                    </Paragraph>
                    <Paragraph Margin="10">
                        Доступные в Visual Studio инструменты для разработки с помощью контейнеров Docker просты 
                        в использовании и значительно упрощают сборку, отладку и развертывание контейнерных приложений. 
                        Можно работать над одним проектом с использованием контейнера или применять оркестрацию 
                        контейнеров с Service Fabric или Docker Compose для работы с несколькими службами в контейнерах.
                    </Paragraph>

                    <Paragraph Margin="10">
                        Поддержка Docker доступна в проектах ASP.NET, ASP.NET 
                        Core и консольных проектах .NET Core и .NET Framework.
                    </Paragraph>

                    <Paragraph Margin="10">
                        Поддержка Docker в Visual Studio оптимизировалась с каждым выпуском программы с 
                        учетом пожеланий пользователей. Есть два уровня поддержки Docker, которые можно 
                        добавить в проект. Набор поддерживаемых возможностей зависит от типа проекта и версии Visual Studio. 
                        Если вам необходим контейнер для работы над отдельным проектом, а не оркестрация, для некоторых типов 
                        проектов можно просто добавить поддержку Docker. Следующий уровень — это поддержка оркестрации контейнеров, 
                        в рамках которой добавляются соответствующие файлы поддержки для определенного оркестратора по выбору.
                    </Paragraph>
                </ListItem>

            </List>
        </FlowDocument>
    </FlowDocumentScrollViewer>
</UserControl>
